/* tslint:disable:max-line-length */

{{>licenseInfo}}
/* tslint:disable:no-unused-variable */
/* tslint:disable:no-unused-variable member-ordering */

import * as Express from "express";
import * as models from "../model/models";

{{#operations}}
// service interface
export interface I{{classname}}Service {
{{#operation}}
    /**
     * {{summary}}
     * {{notes}}
     {{#allParams}}* @param {{paramName}} {{description}}
     {{/allParams}}*/
    /* async */ {{operationId}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^-last}}, {{/-last}}{{/allParams}}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}>;
{{/operation}}
}
{{/operations}}

{{#operations}}
{{#description}}
/**
 * {{&description}}
 */
{{/description}}
export class {{classname}} {
    protected operations = [
{{#operation}}
        {swaggerPath: "{{path}}", expressPath: "", sortPath: "", operationId: "{{operationId}}",
            action: "{{httpMethod}}", method: this.{{operationId}}.bind(this)}{{^-last}},{{/-last}}
{{/operation}}
    ];

    constructor(protected service{{classname}}: I{{classname}}Service = new Default{{classname}}Service()) {}

    public initializeRoutes(app: Express.Express) {
        this.operations.forEach((operation) => {
            operation.action = operation.action.toLowerCase();
            operation.expressPath = operation.swaggerPath.replace(/{/g, ":").replace(/}/g, "");
            operation.sortPath = operation.swaggerPath.replace(/\{.*}/g, "");
        });

        this.operations = this.operations.sort((operation1, operation2): number => {
            return operation2.sortPath.length - operation1.sortPath.length;
        });

        this.operations.forEach((operation) => {
            this.installRoute(app, operation);
        });

        return this;
    }

    protected installRoute(app: Express.Express, operation: any) {
        (<any> app)[operation.action].apply(app, [operation.expressPath, operation.method]);
    }

{{#operation}}
    /**
     * {{summary}}
     */
    public async {{operationId}}(req: Express.Request, res: Express.Response, next: Express.NextFunction) {
        try {
        {{#allParams}}
            const {{paramName}} = (<any> req).swagger.params.{{paramName}}.value;
        {{/allParams}}
        {{#headers}}
            headers.set("{{baseName}}", String({{paramName}}));
        {{/headers}}
            await this.{{operationId}}Internal(req, res{{#allParams}}, {{paramName}}{{/allParams}});
        } catch (error) {
            next(error);
        }
    }

{{/operation}}
{{#operation}}
    /* should be protected */
    public async {{operationId}}Internal(req: Express.Request, res: Express.Response{{#allParams}}, {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{/allParams}}) {
        const {{operationId}}Result = await this.service{{classname}}.{{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}});
        res.json({{operationId}}Result);
    }

{{/operation}}
}
{{/operations}}

{{#operations}}
// default service implementation
export class Default{{classname}}Service {
{{#operation}}
    public async {{operationId}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{^-last}}, {{/-last}}{{/allParams}}): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}{}{{/returnType}}> {
        return Promise.reject("{{operationId}} not implemented");
    }

{{/operation}}
}
{{/operations}}
